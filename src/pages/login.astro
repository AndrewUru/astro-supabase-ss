---
import Layout from '../components/layout.astro'
import Nav from '../components/nav.astro'
import { accessTokenName, refreshTokenName } from '../utils/config'
import { getUser } from '../utils/supabaseServer'

const accessToken = Astro.cookies.get(accessTokenName)?.value
const refreshToken = Astro.cookies.get(refreshTokenName)?.value

// in case the user is already logged in we redirect to profile page
const userData = await getUser({ accessToken, refreshToken })
if (userData) {
  return Astro.redirect('/')
}

---

<Layout title="Login" isLoggedIn={false}>
  <Nav activeUrl="login" isLoggedIn={false} />
  <section class="login-section">
    <div class="login-card">
      <h1>Sign In</h1>
      <p class="description">Sign in via magic link with your email below</p>
      <form class="form-widget">
        <label for="email">Email</label>
        <input
          id="email"
          name="email"
          class="inputField"
          type="email"
          placeholder="Your email"
        />
        <button type="submit" aria-live="polite">
          <span>Send magic link</span>
        </button>
      </form>
    </div>
  </section>
</Layout>

<script>
import { supabase } from '../utils/supabaseBrowser'

// La lógica de autenticación se ejecuta en el cliente.
// Los tokens se copian en cookies, las cuales se acceden en el servidor.

const form = document.querySelector('.form-widget')
const submitBtn = document.querySelector('.form-widget button')
form!.addEventListener('submit', async (e) => {
  e.preventDefault()
  const formData = new FormData(e.target as HTMLFormElement)
  const email = formData.get('email') as string
  if (email) {
    try {
      submitBtn!.textContent = 'Loading'
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: 'localhost:3000'
        }
      })
      if (error) throw error
      alert('Check your email for the login link!')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      submitBtn!.textContent = 'Send magic link'
    }
  }
})
</script>

<style is:global>
  /* Fondo general y tipografía */
  body {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    font-family: 'Inter', sans-serif;
    margin: 0;
    padding: 0;
  }

  /* Sección para centrar la tarjeta de login */
  .login-section {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: calc(100vh - 60px); /* Ajusta si tu Nav ocupa ~60px */
  }

  /* Tarjeta de login con sombra y bordes redondeados */
  .login-card {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    max-width: 400px;
    width: 100%;
    text-align: center;
  }

  .login-card h1 {
    margin-bottom: 1rem;
    font-size: 2rem;
    color: #333;
  }

  .description {
    margin-bottom: 1.5rem;
    color: #555;
  }

  /* Estilos del formulario */
  .form-widget {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .inputField {
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
    width: 100%;
  }

  button {
    padding: 0.75rem;
    background-color: #723af9;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  button:hover {
    background-color: #5e2ce6;
  }
</style>
